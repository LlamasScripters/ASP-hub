services:
  nginx:
    image: nginx:1.27.5-alpine
    restart: unless-stopped
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf
      - ./client/dist:/www/client
    environment:
      - VIRTUAL_HOST=${HOST}
      - LETSENCRYPT_HOST=${HOST} # same as VIRTUAL_HOST because we are deploying the root domain
    
  server:
    build:
      context: server
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - MONGO_URI=${MONGO_URI}
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - BETTER_AUTH_URL=${HOST}
      - HOST=${HOST}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - BREVO_API_KEY=${BREVO_API_KEY}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_REGION=${S3_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - S3_ENDPOINT=${S3_ENDPOINT}
    depends_on:
      - postgres
    deploy:
      resources:
        reservations:
          cpus: 0.5
          memory: 1G
      replicas: 2
  postgres:
    image: postgres:17.5-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}

    deploy:
      resources:
        reservations:
          cpus: 1
          memory: 2G

      placement:
        constraints:
          - node.labels.db == true
          - node.role == worker
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 1

volumes:
  postgres-data:
