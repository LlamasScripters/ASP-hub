name: Deploy to Production

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  CLIENT_IMAGE_NAME: ${{ github.repository }}-client
  SERVER_IMAGE_NAME: ${{ github.repository }}-server
  STACK_NAME: app-stack

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          cd client && npm install
          cd ../server && npm install

      - name: Run lint
        run: npm run lint

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker images
        run: docker compose -f compose.prod.yml build

      - name: Tag Docker images
        run: |
          docker tag app-client:latest ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE_NAME }}:latest
          docker tag app-server:latest ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}:latest

      - name: Push Docker images
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}:latest

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: id_ed25519
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Create Docker context
        run: |
          docker context create remote --docker "host=ssh://${{ secrets.HOST }}"
          docker context use remote

      - name: Initialize Docker Swarm (if not already initialized)
        run: docker swarm init || true

      - name: Deploy to production using Docker Stack
        run: |
          # Pull the latest images on the remote host
          docker compose -f compose.prod.yml pull
          
          # Deploy or update the stack
          docker stack deploy -c compose.prod.yml ${{ env.STACK_NAME }} --with-registry-auth
