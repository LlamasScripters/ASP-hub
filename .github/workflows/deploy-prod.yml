name: Deploy to Production

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  ORGANIZATION: llamasscripters
  CLIENT_IMAGE: ghcr.io/llamasscripters/asphub-client
  SERVER_IMAGE: ghcr.io/llamasscripters/asphub-server
  NODE_VERSION: "22.15.0"

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
          cache-dependency-path: |
            ./package-lock.json
            ./client/package-lock.json
            ./server/package-lock.json

      - name: Install root dependencies
        run: npm install

      - name: Install client dependencies
        working-directory: ./client
        run: npm install

      - name: Install server dependencies
        working-directory: ./server
        run: npm install

      # - name: Run lint checks
      #   run: npm run lint

      # - name: Run client typecheck
      #   working-directory: ./client
      #   run: npm run typecheck

      # - name: Run server typecheck
      #   working-directory: ./server
      #   run: npm run typecheck

      # - name: Run client tests
      #   working-directory: ./client
      #   run: |
      #     npm run test:e2e

      # - name: Run server tests
      #   working-directory: ./server
      #   run: npm run test

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: quality-checks
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.ORGANIZATION }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Generate client metadata
        id: client-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.CLIENT_IMAGE }}
          # No prefix or suffix for SHA tags to make images easier to find
          tags: |
            type=sha,enable=true,priority=100,prefix=,suffix=,format=short
            type=raw,value=main,enable={{is_default_branch}}
          flavor: |
            latest=auto
          labels: |
            org.opencontainers.image.title=ASPHub Client
            org.opencontainers.image.description=Frontend application for ASPHub sports management platform
            org.opencontainers.image.vendor=LlamasScripters
            org.opencontainers.image.url=https://github.com/LlamasScripters/ASP-hub
            org.opencontainers.image.source=https://github.com/LlamasScripters/ASP-hub
            org.opencontainers.image.documentation=https://github.com/LlamasScripters/ASP-hub#readme
            org.opencontainers.image.created={{date 'iso8601'}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.version={{version}}

      - name: Generate server metadata
        id: server-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.SERVER_IMAGE }}
          # No prefix or suffix for SHA tags to make images easier to find
          tags: |
            type=sha,enable=true,priority=100,prefix=,suffix=,format=short
            type=raw,value=main,enable={{is_default_branch}}
          flavor: |
            latest=auto
          labels: |
            org.opencontainers.image.title=ASPHub Server
            org.opencontainers.image.description=Backend API for ASPHub sports management platform
            org.opencontainers.image.vendor=LlamasScripters
            org.opencontainers.image.url=https://github.com/LlamasScripters/ASP-hub
            org.opencontainers.image.source=https://github.com/LlamasScripters/ASP-hub
            org.opencontainers.image.documentation=https://github.com/LlamasScripters/ASP-hub#readme
            org.opencontainers.image.created={{date 'iso8601'}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.version={{version}}

      - name: Build and push client image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          target: production
          push: true
          tags: ${{ steps.client-meta.outputs.tags }}
          labels: ${{ steps.client-meta.outputs.labels }}
          annotations: ${{ steps.client-meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push server image
        uses: docker/build-push-action@v6
        with:
          context: ./server
          target: production
          push: true
          tags: ${{ steps.server-meta.outputs.tags }}
          labels: ${{ steps.server-meta.outputs.labels }}
          annotations: ${{ steps.server-meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up docker context over SSH authentication
        uses: amirmarmul/docker-context-ssh-action@90312071047da58fda503391fd98d2890b042bb5
        with:
          ssh-host: ${{ secrets.SSH_HOST }}
          ssh-username: ${{ secrets.SSH_USERNAME }}
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          context-name: production
          context-use: true

      - name: Update stack services

        run: |
          # Use commit SHA for deterministic deployments
          CLIENT_IMAGE_WITH_TAG="${{ env.CLIENT_IMAGE }}:main"
          SERVER_IMAGE_WITH_TAG="${{ env.SERVER_IMAGE }}:main"
          SERVER_MIGRATOR_IMAGE_WITH_TAG="${{ env.SERVER_IMAGE }}:main"

          echo "ðŸš€ Deployment summary:"
          echo "  Trigger: ${{ github.ref_type }}"
          echo "  Branch: ${{ github.ref_name }}"
          echo "  Commit SHA: ${{ github.sha }}"
          echo "  Client image: ${CLIENT_IMAGE_WITH_TAG}"
          echo "  Server image: ${SERVER_IMAGE_WITH_TAG}"

          echo "ðŸ“¦ Updating client service..."
          docker service update \
            --image "${CLIENT_IMAGE_WITH_TAG}" \
            asphub_application_client

          echo "ðŸ“¦ Executing database migrations..."
          docker run --rm --network asphub_backend \
            --env DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            ${SERVER_MIGRATOR_IMAGE_WITH_TAG} \
            npx drizzle-kit migrate

          echo ""
          echo "ðŸ“¦ Seeding database..."
          docker run --rm --network asphub_backend \
            --env DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --env ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}" \
            --env ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}" \
            --env ADMIN_PHONE="${{ secrets.ADMIN_PHONE }}" \
            --env JURY_EMAIL="${{ secrets.JURY_EMAIL }}" \
            --env JURY_PASSWORD="${{ secrets.JURY_PASSWORD }}" \
            --env GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
            --env GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --env BREVO_API_KEY="${{ secrets.BREVO_API_KEY }}" \
            --env BETTER_AUTH_SECRET="${{ secrets.BETTER_AUTH_SECRET }}" \
            --env BETTER_AUTH_HOST="${{ secrets.BETTER_AUTH_HOST }}" \
            ${SERVER_MIGRATOR_IMAGE_WITH_TAG} \
            node /app/dist/db/seed.js seed production

          echo "ðŸ“¦ Updating server service..."
          docker service update \
            --image "${SERVER_IMAGE_WITH_TAG}" \
            asphub_application_server

      - name: Verify deployment
        run: |
          # Use reusable deployment verification script
          scripts/deployment/verify-deployment.sh \
            --stack-name="asphub_application" \
            --services="client,server" \
            --timeout=300 \
            --interval=10

      - name: Cleanup Docker context
        if: always()
        run: |
          docker context use default
          docker context rm production || true
